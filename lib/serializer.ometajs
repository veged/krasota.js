ometa KrasotaJSSerializer {

    spaces = :s,

    spacesAndComments = [t*:c] -> c,

    comment = :x,

    name = :n,

    keyword = :k,

    bool = :b,

    number = :n,

    commaList = t:x (t:xx -> [',', xx])*:xs -> [x, xs],

    escapeChar = :c :u -> ['\\', c],
    string = :q [(char | t:ec)*:c] -> [q, c, q],

    op = t:s1 :o t:s2 -> [s1, o, s2],

    funcRest = t:as t:s t:c -> ['(', as, ')', s, c],
    funcArg = t:s1 t:n t:s2 -> [s1, n, s2],

    binop = t:e1 t:o t:e2 -> [e1, o, e2],
    unop = t:o t:e -> [o, e],
    postop = t:e t:s :o -> [e, s, o],

    getExprSB = t:e t:s1 t:s2 t:i t:s3 -> [e, s1, '[', s2, i, s3, ']'],
    getExprDot = t:e t:s1 t:s2 t:n -> [e, s1, '.', s2, n],

    callExpr = t:e t:s1 t:as -> [e, s1, '(', as, ')'],
    arg = t:s1 t:e t:s2 -> [s1, e, s2],

    condExpr = t:e1 t:o1 t:e2 t:o2 t:e3 -> [e1, o1, e2, o2, e3],

    bracketedExpr = t:s1 t:e t:s2 -> ['(', s1, e, s2, ')'],

    funcExpr = t:s1 t:n t:s2 funcRest:c -> [#function, s1, n, s2, c]
        | t:s1 funcRest:c -> [#function, s1, c],

    newExpr = t:s1 t:e t:s2 t:as -> [#new, s1, e, s2, '(', as, ')']
        | t:s1 t:e -> [#new, s1, e],

    arr = t:c -> ['[', c, ']'],
    arrItem = t:s1 t:e t:s2 -> [s1, e, s2],

    obj = t:c -> ['{', c, '}'],
    objItem = t:s1 t:n t:s2 t:s3 t:v t:s4 -> [s1, n, s2, ':', s3, v, s4],

    re = t:c :f -> [c, f.join('')],


    stmtWithExprAndStmt :k = t:s1 t:be t:s2 t:c -> [k, s1, be, s2, c],
    stmtWithLabel :k = t:s t:l -> [k, s, l]
        | empty -> [k],

    blockStmt = t:c -> ['{', c, '}'],

    stmtEnd = t:s :c -> [s, c]
        | t:s
        | empty -> '',

    stmts = t*:c -> c,

    stmt = &(anything+:x) t:s1 t:c t:se t:s2 -> [s1, c, se, s2],

    funcStmt = t:s1 t:n t:s2 funcRest:c -> [#function, s1, n, s2, c],

    varStmt = [t+:c] -> [#var, c.map(function(v, i) { return i == c.length - 1 ? v : [v, ','] })],
    varItemAsgn = t:n t:s1 t:s2 t:e t:s3 -> [n, s1, '=', s2, e, s3],
    varItemName = t:s1 t:n t:s2 -> [s1, n, s2],

    ifStmt = stmtWithExprAndStmt(#if):i
            t:se t:s1 t:s2 t:e -> [i, se, s1, 'else', s2, e]
        | stmtWithExprAndStmt(#if),

    whileStmt = stmtWithExprAndStmt(#while),
    doStmt = t:s1 t:c t:s2 t:s3 t:be -> [#do, s1, c, s2, #while, s3, be],

    forStmt = t:s1 forStmtExprs:e t:s2 t:c -> [#for, s1, e, s2, c],
    forStmtExprs = [t:e1 t:e2 t:e3] -> ['(', e1, ';', e2, ';', e3, ')'],
    forStmtExpr = t:s1 t:c t:s2 -> [s1, c, s2]
        | t:s,

    forInStmt = t:s1 forInStmtExpr:e t:s2 t:c -> [#for, s1, e, s2, c],
    forInStmtExpr = [t:s1 t:e1 t:s2 t:s3 t:e2 t:s4] -> ['(', s1, e1, s2, 'in', s3, e2, s4, ')'],
    forInStmtVar = t:c -> ['var', c],

    breakStmt = stmtWithLabel(#break),
    continueStmt = stmtWithLabel(#continue),

    switchStmt = t:s1 t:be t:s2 t:c -> [#switch, s1, be, s2, c],
    switchStmtContent = [t*:c] -> ['{', c, '}'],
    switchStmtItem = t:s1 t:l t:s2 t:s3 t:c -> [s1, l, s2, ':', s3, c],

    switchStmtCase = t:s t:e -> [#case, s, e],
    switchStmtDefault = t:s -> [#default, s],

    throwStmt = t:s1 t:e t:s2 -> [#throw, s1, e, s2],
    tryStmt = t:s1 t:b t:s2 t:c t:s3 t:f t:s4 -> [#try, s1, b, s2, c, s3, f, s4]
        | t:s1 t:b t:s2 t:c -> [#try, s1, b, s2, c],
    tryStmtCatch = t:s1 t:be t:s2 t:c -> [#catch, s1, be, s2, c],
    tryStmtFinally = t:s1 t:c -> [#finally, s1, c],

    returnStmt = t:s1 t:c t:s2 -> [#return, s1, c, s2]
        | t:s2 -> [#return, s2],

    withStmt = stmtWithExprAndStmt(#with),

    labelStmt = t:l t:s1 t:s2 t:c -> [l, s1, ':', s2, c],

    exprStmt = t:e -> [e],

    emptyStmt -> ';',


    t = [:t apply(t):r] -> r,

    topLevel = t:c end -> KrasotaJSSerializer._flatjoin(c)
}

KrasotaJSSerializer._flatjoin = function(arr) {
    function j(r, o) { return o.reduce ? o.reduce(j, r) : r + o }
    return arr.reduce(j, '')
}
