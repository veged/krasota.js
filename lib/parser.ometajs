ometa KrasotaJSParser {

    spaces = < space* >:c -> [#spaces, c],
    spacesNoNl = < (~'\n' space)* >:c -> [#spaces, c],
    spacesUntil :u = spacesNoNl:s &apply(u) -> s
        | &apply(u) -> [#spaces, '']
        | spaces,

    comment = (< ``//'' (~'\n' char)* > | fromTo('/*', '*/')):c -> [#comment, c],

    sc = (comment | (< space+ >:s -> [#spaces, s]))*:c -> [#spacesAndComments, c],
    scNoNl = (comment | (< (~'\n' space)+ >:s -> [#spaces, s]))*:c -> [#spacesAndComments, c],

    commaList :t = apply(t):x (',' apply(t))*:xs -> [#commaList, x].concat(xs),

    nameFirst = letter | '$' | '_',
    nameRest = nameFirst | digit,
    iName = firstAndRest(#nameFirst, #nameRest):r -> r.join(''),
    isNumber :x = ?(x === 'Infinity' || x === 'NaN'),
    isKeyword :x = ?KrasotaJSParser._isKeyword(x),
    name = iName:n ~isKeyword(n) ~isNumber(n) -> [#name, n],
    keyword :k = iName:kk isKeyword(kk) ?(!k || k == kk) -> [#keyword, kk],

    bool = (``true'' | ``false''):b -> [#bool, b],

    hexDigit = char:x {this.hexDigits.indexOf(x.toLowerCase())}:v ?(v >= 0) -> v,
    hexLit = hexLit:n hexDigit:d -> (n * 16 + d)
        | hexDigit,
    number = ``0x'' hexLit:n -> [#number, n]
        | < digit+ (
            ( (('e' | 'E') ('-' | '+')?)
            | '.' )
                digit+)? >:f -> [#number, f]
        | (``Infinity'' | ``NaN''):s -> [#number, s],

    escapeChar = '\\' char:c -> [#escapeChar, c, unescape('\\' + c)],
    string = string_("'") | string_('"'),
    string_ :q = seq(q) (escapeChar | ~seq(q) char)*:cs seq(q) -> [#string, q, cs],

    op :o = sc:sc1 seq(o):c sc:sc2 -> [#op, sc1, o, sc2],

    funcRest = '(' (commaList(#funcArg) | sc):as ')' sc:s block:c -> [as, s, c],
    funcArg = sc:sc1 name:n sc:sc2 -> [#funcArg, sc1, n, sc2],

    expr = commaExpr,
    commaExpr = commaExpr:e1 op(','):o asgnExpr:e2 -> [#binop, e1, o, e2]
        | asgnExpr,
    asgnExpr = condExpr:e1 (
        ( op('=')
        | op('+=')
        | op('-=')
        | op('*=')
        | op('/=')
        | op('%=')
        | op('<<=')
        | op('>>=')
        | op('>>>=')
        | op('&=')
        | op('^=')
        | op('|=')
            ):o asgnExpr:e2 -> [#binop, e1, o, e2]
        | empty -> e1 ),
    condExpr = orExpr:e1 (
        op('?'):o1 condExpr:t op(':'):o2 condExpr:f -> [#condExpr, e1, o1, t, o2, f]
        | empty -> e1 ),
    orExpr = orExpr:e1 op('||'):o andExpr:e2 -> [#binop, e1, o, e2]
        | andExpr,
    andExpr = andExpr:e1 op('&&'):o bitOrExpr:e2 -> [#binop, e1, o, e2]
        | bitOrExpr,
    bitOrExpr = bitOrExpr:e1 op('|'):o bitXorExpr:e2 -> [#binop, e1, o, e2]
        | bitXorExpr,
    bitXorExpr = bitXorExpr:e1 op('^'):o bitAndExpr:e2 -> [#binop, e1, o, e2]
        | bitAndExpr,
    bitAndExpr = bitAndExpr:e1 op('&'):o eqExpr:e2 -> [#binop, e1, o, e2]
        | eqExpr,
    eqExpr = eqExpr:e1 (
        (op('===') | op('!==') | op('==') | op('!=')):o
            relExpr:e2 -> [#binop, e1, o, e2] )
        | relExpr,
    relExpr = relExpr:e1 (
        (op('>=') | op('>') | op('<=') | op('<') | op('instanceof') | op('in')):o
            relExpr:e2 -> [#binop, e1, o, e2] )
        | bitShiftExpr,
    bitShiftExpr = bitShiftExpr:e1 (
        (op('>>>') | op('>>') | op('<<')):o
            bitShiftExpr:e2 -> [#binop, e1, o, e2] )
        | addExpr,
    addExpr = addExpr:e1 (
        (op('+') | op('-')):o
            mulExpr:e2 -> [#binop, e1, o, e2] )
        | mulExpr,
    mulExpr = mulExpr:e1 (
        (op('*') | op('/') | op('%')):o
            unary:e2 -> [#binop, e1, o, e2] )
        | unary,
    unary = ( (op('--') | op('++') | op('+')):o postfix:e ->  [#unop, o, e]
            | op('-') number:n ->  [#number, '-' + n[1]]
            | (op('-') | op('~')):o postfix:e ->  [#unop, o, e]
            | (op('!') | op('void') | op('delete') | op('typeof')):o unary:e  -> [#unop, o, e]
            )
        | postfix,
    postfix = leftExpr:e
        ( scNoNl:s (seq('++') | seq('--')):o -> [#postop, e, s, o]
        | empty -> e ),
    leftExpr = callExpr | newExpr,
    callExpr = callExpr:e getExpr_(#callExpr, e)
        | callExpr:e sc:sc1 args:as -> [#callExpr, e, sc1, as]
        | getExpr,
    args = '(' (commaList(#arg) | sc):as ')' -> as,
    arg = sc:sc1 asgnExpr:e sc:sc2 -> [#arg, sc1, e, sc2],
    newExpr = keyword(#new) sc:sc1 newExpr:e -> [#newExpr, sc1, e]
        | getExpr,
    getExpr_ :name :e = sc:sc1
            ( '[' sc:sc2 expr:i sc:sc3 ']' -> [#getExprSB, e, sc1, sc2, i, sc3]
            | '.' sc:sc2 name:n -> [#getExprDot, e, sc1, sc2, n] ),
    getExpr = getExpr:e getExpr_(#getExpr, e)
        |
            ( primExpr
            | funcExpr
            | keyword(#new) sc:sc1 getExpr:e sc:sc2 args:as  -> [#newExpr, sc1, e, sc2, as] ),
    primExpr = keyword(#this)
        | keyword(#null)
        | bool
        | name
        | number
        | string
        | arr
        | obj
        | re
        | bracketedExpr,

    bracketedExpr = '(' sc:sc1 expr:e sc:sc2 ')' -> [#bracketedExpr, sc1, e, sc2],

    funcExpr = keyword(#function) sc:sc1
        (name:n sc:sc2)?
            funcRest:c -> [#funcExpr, sc1].concat(n ? [n, sc2] : []).concat(c),

    arr = '[' (commaList(#arrItem) | sc):c ']' -> [#arr, c],
    arrItem = sc:sc1 asgnExpr:e sc:sc2 -> [#arrItem, sc1, e, sc2],

    obj = '{' (commaList(#objItem) | sc):c '}' -> [#obj, c],
    objItem = sc:sc1 (name | string):n sc:sc2
        ':' sc:sc3 asgnExpr:v sc:sc4 -> [#objItem, sc1, n, sc2, sc3, v, sc4],

    re = string_('/'):c
        reFlags*:f -> [#re, c, f],
    reFlags = 'g' | 'i' | 'm',

    block = '{' (stmts1 | sc):c '}' -> [#blockStmt, c],

    stmtWithBlockStmt :k = keyword(k) sc:sc1 block:c -> [k + #Stmt, sc1, c],
    stmtWithExprAndStmt :k = keyword(k) sc:sc1 bracketedExpr:be sc:sc2 stmtContent:c -> [k + #Stmt, sc1, be, sc2, c],
    stmtWithLabel :k = keyword(k) sc:sc1 name:l -> [k + #Stmt, sc1, l]
        | keyword(k) -> [k + #Stmt],

    stmtEnd = scNoNl:s ('\n' | ';'):c -> [#stmtEnd, s, c]
        | scNoNl:s ( &'}' | end) -> [#stmtEnd, s],

    stmtContentEnd :c = ( ?(!(c[0] == #blockStmt || c[c.length - 1][0] == #blockStmt)) stmtEnd | empty -> [#stmtEnd] ),

    stmts = stmt*:c -> [#stmts].concat(c),
    stmts1 = stmt+:c -> [#stmts].concat(c),

    stmt = sc:sc1 stmtContent:c stmtContentEnd(c):se sc:sc2 -> [#stmt, sc1, c, se, sc2],

    stmtContent = funcStmt
        | block

        | varStmt

        | ifStmt

        | whileStmt
        | doStmt

        | forStmt
        | forInStmt

        | breakStmt
        | continueStmt

        | switchStmt

        | throwStmt
        | tryStmt

        | returnStmt

        | withStmt

        | labelStmt

        | exprStmt

        | emptyStmt,


    funcStmt = keyword(#function) sc:sc1
        name:n sc:sc2
            funcRest:c -> [#funcStmt, sc1, n, sc2].concat(c),

    varStmt = keyword(#var) varItems:c -> [#varStmt, c],
    varItems = varItem:x sc:sc1 ',' varItems:xs -> { x[x.length - 1] = sc1; [x].concat(xs) }
        |  varItem:x -> { x[x.length - 1] = [#spacesAndComments, []]; [x] },
    varItem = varItemAsgn | varItemName,
    varItemAsgn = varItemName:n sc:sc1 '=' sc:sc2 asgnExpr:e -> [#varItemAsgn, n, sc1, sc2, e, [#spacesAndComments, []]],
    varItemName = sc:sc1 name:n -> [#varItemName, sc1, n, [#spacesAndComments, []]],

    ifStmt = stmtWithExprAndStmt(#if):i
            stmtContentEnd(i):se
            sc:sc1
            keyword(#else)
            sc:sc2
            stmtContent:e -> i.concat([se, sc1, sc2, e])
        | stmtWithExprAndStmt(#if),

    whileStmt = stmtWithExprAndStmt(#while),
    doStmt = stmtWithBlockStmt(#do):d sc:sc1
        keyword(#while) sc:sc2 bracketedExpr:be -> d.concat([sc1, sc2, be]),

    forStmt = keyword(#for) sc:sc1 forStmtExprs:e sc:sc2 block:c -> [#forStmt, sc1, e, sc2, c],
    forStmtExprs = '(' (forStmtExpr1 | forStmtExpr):e1 ';' forStmtExpr:e2 ';' forStmtExpr:e3 ')' -> [e1, e2, e3],
    forStmtExpr1 = sc:sc1 varStmt:c sc:sc2 -> [#forStmtExpr, sc1, c, sc2],
    forStmtExpr = sc:sc1 expr:c sc:sc2 -> [#forStmtExpr, sc1, c, sc2]
        | sc:sc1 -> [#forStmtExpr, sc1],

    forInStmt = keyword(#for) sc:sc1 forInStmtExpr:e sc:sc2 block:c -> [#forInStmt, sc1, e, sc2, c],
    forInStmtExpr = '(' sc:sc1 (forInStmtVar | name):e1 sc:sc2 keyword('in') sc:sc3 asgnExpr:e2 sc:sc4 ')' -> [sc1, e1, sc2, sc3, e2, sc4],
    forInStmtVar = keyword(#var) varItemName:c -> [#varStmt, [c]],

    breakStmt = stmtWithLabel(#break),
    continueStmt = stmtWithLabel(#continue),

    switchStmt = keyword(#switch) sc:sc1 bracketedExpr:be sc:sc2 switchStmtContent:c -> [#switchStmt, sc1, be, sc2, c],
    switchStmtContent = '{' switchStmtItem*:c '}' -> [#switchStmtContent, c],
    switchStmtItem = sc:sc1 (switchStmtCase | switchStmtDefault):l sc:sc2 ':' sc:sc3 stmts:c -> [#switchStmtItem, sc1, l, sc2, sc3, c],

    switchStmtCase = keyword(#case) sc:s expr:e -> [#switchStmtCase, s, e],
    switchStmtDefault = keyword(#default) sc:s -> [#switchStmtDefault, s],

    throwStmt = keyword(#throw) scNoNl:sc1 expr:e scNoNl:sc2 -> [#throwStmt, sc1, e, sc2],
    tryStmt = stmtWithBlockStmt(#try):t sc:sc1 tryStmtCatch:c sc:sc2 tryStmtFinally:f sc:sc3 -> t.concat([sc1, c, sc2, f, sc3])
        | stmtWithBlockStmt(#try):t sc:sc1 tryStmtCatch:c -> t.concat([sc1, c]),
    tryStmtCatch = keyword(#catch) sc:sc1
        '(' sc:sc2 name:n sc:sc3 ')'
            sc:sc4 block:c -> [#tryStmtCatch, sc1, [#bracketedExpr, sc2, n, sc3], sc4, c],
    tryStmtFinally = keyword(#finally) sc:sc1 block:c -> [#tryStmtFinally, sc1, c],

    returnStmt = keyword(#return) (scNoNl:sc1 expr:e)? scNoNl:sc2 -> [#returnStmt].concat((e ? [sc1, e] : []).concat([sc2])),

    withStmt = stmtWithExprAndStmt(#with),

    labelStmt = name:l sc:sc1 ':' sc:sc2 stmtContent:c -> [#labelStmt, l, sc1, sc2, c],

    exprStmt = expr:e -> [#exprStmt, e],

    emptyStmt = ';' -> [#emptyStmt],


    topLevel = [(stmts1 | sc):c] -> c
}

KrasotaJSParser.hexDigits = '0123456789abcdef'

KrasotaJSParser._isKeyword = (function(ks, k) {
    var keywords = {}
    while(k = ks.shift()) keywords[k] = true
    return function(k) { return keywords.hasOwnProperty(k) }
})([
    'break', 'case', 'catch', 'continue', 'default', 'delete', 'do', 'else', 'finally', 'for', 'function', 'if', 'in',
    'instanceof', 'new', 'null', 'return', 'switch', 'this', 'throw', 'try', 'typeof', 'var', 'void', 'while', 'with'
])
