var KrasotaJSIdentity = require('../krasota').KrasotaJSIdentity;

ometa KrasotaJS <: KrasotaJSIdentity {

    replaceSingleLineSpaces :r = [#spaces :c] -> [#spaces, c.indexOf('\n') === -1 ? r : c] | t,

    commaListItemFirstCommentFirstSC = replaceSingleLineSpaces(' ') |
        (end | ~~[#comment anything]) -> [#spaces, ' '],

    commaListItemLastCommentLastSC = replaceSingleLineSpaces(''),

    commaListItemFirstComment = [#spacesAndComments [commaListItemFirstCommentFirstSC:sp t*:b]] ->
        [#spacesAndComments, [sp].concat(b)],

    commaListItemLastComment = [#spacesAndComments [t+:a]] -> {
            a.push(KrasotaJS.match(a.pop(), 'commaListItemLastCommentLastSC'));
            return ['spacesAndComments', a]
        } |
        t,

    commaListFirstItem =
        [#objItem t:sc1 t:n t:sc2 t:sc3 t:v commaListItemLastComment:sc4] ->
            [#objItem, sc1, n, sc2, sc3, v, sc4] |
        [(#arrItem|#funcArg):n t:s1 t:e commaListItemLastComment:s2] ->
            [n, s1, e, s2],
    commaListLastItem =
        [#objItem commaListItemFirstComment:sc1 t:n t:sc2 t:sc3 t:v t:sc4] ->
            [#objItem, sc1, n, sc2, sc3, v, sc4] |
        [(#arrItem|#funcArg):n commaListItemFirstComment:s1 t:e t:s2] ->
            [n, s1, e, s2],
    commaListItem =
        [#objItem commaListItemFirstComment:sc1 t:n t:sc2 t:sc3 t:v commaListItemLastComment:sc4] ->
            [#objItem, sc1, n, sc2, sc3, v, sc4] |
        [(#arrItem|#funcArg):n commaListItemFirstComment:s1 t:e commaListItemLastComment:s2] ->
            [n, s1, e, s2],

    commaList =
        commaListFirstItem:first t+:tail -> {
            var last = KrasotaJS.match(tail.pop(), 'commaListLastItem');
            tail = tail.map(function(item){ return KrasotaJS.match(item, 'commaListItem') });
            tail.push(last);
            return ['commaList', first].concat(tail);
        } |
        ^commaList

}
