ometa KrasotaJSIdentity {

    spaces = :s -> [#spaces, s],

    spacesAndComments = [t*:c] -> [#spacesAndComments, c],

    comment = :c -> [#comment, c],

    commaList = t:x t*:xs -> [#commaList, x].concat(xs),

    name = :n -> [#name, n],

    keyword = :k -> [#keyword, k],

    bool = :b -> [#bool, b],

    number = :n -> [#number, n],

    escapeChar = :c :u -> [#escapeChar, c, u],
    string = :q [(char | t:ec)*:c] -> [#string, q, c],

    op = t:s1 :o t:s2 -> [#op, s1, o, s2],

    funcRest = t:as t:s t:c -> [as, s, c],
    funcArg = t:s1 t:n t:s2 -> [#funcArg, s1, n, s2],

    condExpr = t:e1 t:o1 t:e2 t:o2 t:e3 -> [#condExpr, e1, o1, e2, o2, e3],

    binop = t:e1 t:o t:e2 -> [#binop, e1, o, e2],
    unop = t:o t:e -> [#unop, o, e],
    postop = t:e t:s :o -> [#postop, e, s, o],

    callExpr = t:e t:s1 t:as -> [#callExpr, e, s1, as],
    arg = t:s1 t:e t:s2 -> [#arg, s1, e, s2],

    newExpr = t:s1 t:e t:s2 t:as -> [#newExpr, s1, e, s2, as]
        | t:s1 t:e -> [#newExpr, s1, e],

    getExprSB = t:e t:s1 t:s2 t:i t:s3 -> [#getExprSB, e, s1, s2, i, s3],
    getExprDot = t:e t:s1 t:s2 t:n -> [#getExprDot, e, s1, s2, n],

    bracketedExpr = t:s1 t:e t:s2 -> [#bracketedExpr, s1, e, s2],

    funcExpr = t:s1 t:n t:s2 funcRest:c -> [#funcExpr, s1, n, s2].concat(c)
        | t:s1 funcRest:c -> [#funcExpr, s1].concat(c),

    arr = t:c -> [#arr, c],
    arrItem = t:s1 t:e t:s2 -> [#arrItem, s1, e, s2],

    obj = t:c -> [#obj, c],
    objItem = t:s1 t:n t:s2 t:s3 t:v t:s4 -> [#objItem, s1, n, s2, s3, v, s4],

    re = t:c :f -> [#re, c, f],

    blockStmt = t:c -> [#blockStmt, c],

    stmtWithExprAndStmt :k = t:s1 t:be t:s2 t:c -> [k + #Stmt, s1, be, s2, c],
    stmtWithLabel :k = t:s t:l -> [k + #Stmt, s, l]
        |  empty -> [k + #Stmt],

    stmtEnd = t:s :c -> [#stmtEnd, s, c]
        | t:s -> [#stmtEnd, s]
        | empty -> [#stmtEnd],

    stmts = t*:c -> [#stmts].concat(c),

    stmt = t:s1 t:c t:se t:s2 -> [#stmt, s1, c, se, s2],

    funcStmt = t:s1 t:n t:s2 funcRest:c -> [#funcStmt, s1, n, s2].concat(c),

    varStmt = [t+:c] -> [#varStmt, c],
    varItemAsgn = t:n t:s1 t:s2 t:e t:s3 -> [#varItemAsgn, n, s1, s2, e, s3],
    varItemName = t:s1 t:n t:s2 -> [#varItemName, s1, n, s2],

    ifStmt = stmtWithExprAndStmt(#if):i
            t:se t:s1 t:s2 t:e -> i.concat([se, s1, s2, e])
        | stmtWithExprAndStmt(#if),

    whileStmt = stmtWithExprAndStmt(#while),
    doStmt = t:s1 t:c t:s2 t:s3 t:be -> [#doStmt, s1, c, s2, s3, be],

    forStmt = t:s1 forStmtExprs:e t:s2 t:c -> [#forStmt, s1, e, s2, c],
    forStmtExprs = [t:e1 t:e2 t:e3] -> [e1, e2, e3],
    forStmtExpr = t:s1 t:c t:s2 -> [#forStmtExpr, s1, c, s2]
        | t:s -> [#forStmtExpr, s],

    forInStmt = t:s1 forInStmtExpr:e t:s2 t:c -> [#forInStmt, s1, e, s2, c],
    forInStmtExpr = [t:s1 t:e1 t:s2 t:s3 t:e2 t:s4] -> [s1, e1, s2, s3, e2, s4],
    forInStmtVar = t:c -> [#varStmt, c],

    breakStmt = stmtWithLabel(#break),
    continueStmt = stmtWithLabel(#continue),

    switchStmt = t:s1 t:be t:s2 t:c -> [#switchStmt, s1, be, s2, c],
    switchStmtContent = [t*:c] -> [#switchStmtContent, c],
    switchStmtItem = t:s1 t:l t:s2 t:s3 t:c -> [#switchStmtItem, s1, l, s2, s3, c],

    switchStmtCase = t:s t:e -> [#switchStmtCase, s, e],
    switchStmtDefault = t:s -> [#switchStmtDefault, s],

    throwStmt = t:s1 t:e t:s2 -> [#throwStmt, s1, e, s2],
    tryStmt = t:s1 t:b t:s2 t:c t:s3 t:f t:s4 -> [#tryStmt, s1, b, s2, c, s3, f, s4]
        | t:s1 t:b t:s2 t:c -> [#tryStmt, s1, b, s2, c],
    tryStmtCatch = t:s1 t:be t:s2 t:c -> [#tryStmtCatch, s1, be, s2, c],
    tryStmtFinally = t:s1 t:c -> [#tryStmtFinally, s1, c],

    returnStmt = t:s1 t:c t:s2 -> [#returnStmt, s1, c, s2]
        | t:s2 -> [#returnStmt, s2],

    withStmt = stmtWithExprAndStmt(#with),

    labelStmt = t:l t:s1 t:s2 t:c -> [#labelStmt, l, s1, s2, c],

    exprStmt = t:e -> [#exprStmt, e],

    emptyStmt -> [#emptyStmt],


    t = [:t apply(t):r] -> r,

    topLevel = t:c end -> c
}
